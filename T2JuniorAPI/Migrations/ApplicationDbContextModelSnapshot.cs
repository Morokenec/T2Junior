// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T2JuniorAPI.Data;

#nullable disable

namespace T2JuniorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccumulatedPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Post")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdMedia");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Raiting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reports")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.ClubRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ClubRoles");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.ClubUser", b =>
                {
                    b.Property<Guid>("IdClub")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdClub", "IdUser", "IdRole");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("ClubUsers");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("IdNote")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdNoteNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUserNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParrentCommentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdNoteNavigationId");

                    b.HasIndex("IdUserNavigationId");

                    b.HasIndex("ParrentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EndDatetime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FactParticpants")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("IdClub")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdDirection")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberParticpants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Raiting")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("IdClub");

                    b.HasIndex("IdDirection");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.EventDirection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("EventDirections");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaClub", b =>
                {
                    b.Property<Guid>("IdClub")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsAvatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdClub", "IdMedia");

                    b.HasIndex("IdMedia");

                    b.ToTable("MediaClubs");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("IdComment")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdCommentNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCommentNavigationId");

                    b.HasIndex("IdMedia")
                        .IsUnique();

                    b.ToTable("MediaComments");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaEvent", b =>
                {
                    b.Property<Guid>("IdEvent")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdEvent", "IdMedia");

                    b.HasIndex("IdMedia");

                    b.ToTable("MediaEvents");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaNote", b =>
                {
                    b.Property<Guid>("IdNote")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdNote", "IdMedia");

                    b.HasIndex("IdMedia")
                        .IsUnique();

                    b.ToTable("MediaNotes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Mediafile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("IdType")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdType");

                    b.HasIndex("IdUser");

                    b.ToTable("Mediafiles");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IdRepost")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdStatus")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdStatusNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdWall")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdWallNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdRepost");

                    b.HasIndex("IdStatusNavigationId");

                    b.HasIndex("IdWallNavigationId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.NoteStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("NoteStatuses");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserAchievement", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdAchievement")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdUser", "IdAchievement");

                    b.HasIndex("IdAchievement");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("IdMedia")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdMedia");

                    b.HasIndex("IdUser");

                    b.ToTable("UserAvatars");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserSubscribers", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdSubscriber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("IdUser", "IdSubscriber");

                    b.HasIndex("IdSubscriber");

                    b.ToTable("UserSubscribers");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Wall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("IdClubOwner")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdType")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IdUserOwner")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdClubOwner");

                    b.HasIndex("IdType");

                    b.HasIndex("IdUserOwner");

                    b.ToTable("Walls");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.WallType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreationDate")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDelete")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("WallTypes");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.HasOne("Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Achievement", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "MediaFilesNavigation")
                        .WithMany("Achievements")
                        .HasForeignKey("IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaFilesNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.ClubUser", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Club", "IdClubNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.ClubRole", "IdRoleNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "IdUserNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdClubNavigation");

                    b.Navigation("IdRoleNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Comment", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Note", "IdNoteNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdNoteNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUserNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Comment", "ParrentComment")
                        .WithMany("InverseParrentComment")
                        .HasForeignKey("ParrentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IdNoteNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("ParrentComment");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Event", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Club", null)
                        .WithMany("Events")
                        .HasForeignKey("ClubId");

                    b.HasOne("T2JuniorAPI.Entities.Club", "IdClubNavigation")
                        .WithMany()
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.EventDirection", "IdDirectionNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdDirection")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdClubNavigation");

                    b.Navigation("IdDirectionNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaClub", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Club", "IdClubNavigation")
                        .WithMany("MediaClubs")
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "MediaFilesNavigation")
                        .WithMany("MediaClubs")
                        .HasForeignKey("IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdClubNavigation");

                    b.Navigation("MediaFilesNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaComment", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Comment", "IdCommentNavigation")
                        .WithMany()
                        .HasForeignKey("IdCommentNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "IdMediaNavigation")
                        .WithOne("MediaComment")
                        .HasForeignKey("T2JuniorAPI.Entities.MediaComment", "IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdCommentNavigation");

                    b.Navigation("IdMediaNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaEvent", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Event", "IdEventNavigation")
                        .WithMany("MediaEvents")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "MediaFilesNavigation")
                        .WithMany("MediaEvents")
                        .HasForeignKey("IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdEventNavigation");

                    b.Navigation("MediaFilesNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaNote", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "IdMediaNavigation")
                        .WithOne("MediaNote")
                        .HasForeignKey("T2JuniorAPI.Entities.MediaNote", "IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Note", "IdNoteNavigation")
                        .WithMany("MediaNotes")
                        .HasForeignKey("IdNote")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdMediaNavigation");

                    b.Navigation("IdNoteNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Mediafile", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.MediaType", "IdMediaTypesNavigation")
                        .WithMany("Mediafiles")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "IdUserNavigation")
                        .WithMany("Mediafiles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdMediaTypesNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Note", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Note", "IdRepostNavigation")
                        .WithMany("InverseIdRepostNavigation")
                        .HasForeignKey("IdRepost")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("T2JuniorAPI.Entities.NoteStatus", "IdStatusNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdStatusNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Entities.Wall", "IdWallNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdWallNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRepostNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdWallNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserAchievement", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Achievement", "AchievementsNavigation")
                        .WithMany("UserAchievement")
                        .HasForeignKey("IdAchievement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "UserNavigation")
                        .WithMany("UserAchievements")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AchievementsNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserAvatar", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Mediafile", "Media")
                        .WithMany("UserAvatars")
                        .HasForeignKey("IdMedia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("UserAvatars")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.UserSubscribers", b =>
                {
                    b.HasOne("ApplicationUser", "Subscriber")
                        .WithMany()
                        .HasForeignKey("IdSubscriber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Subscribers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscriber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Wall", b =>
                {
                    b.HasOne("T2JuniorAPI.Entities.Club", "ClubOwner")
                        .WithMany("Walls")
                        .HasForeignKey("IdClubOwner")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("T2JuniorAPI.Entities.WallType", "IdTypeNavigation")
                        .WithMany("Walls")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "UserOwner")
                        .WithMany("Walls")
                        .HasForeignKey("IdUserOwner")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClubOwner");

                    b.Navigation("IdTypeNavigation");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Comments");

                    b.Navigation("Mediafiles");

                    b.Navigation("Subscribers");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserAvatars");

                    b.Navigation("Walls");
                });

            modelBuilder.Entity("Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Achievement", b =>
                {
                    b.Navigation("UserAchievement");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Club", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Events");

                    b.Navigation("MediaClubs");

                    b.Navigation("Walls");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.ClubRole", b =>
                {
                    b.Navigation("ClubUsers");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Comment", b =>
                {
                    b.Navigation("InverseParrentComment");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Event", b =>
                {
                    b.Navigation("MediaEvents");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.EventDirection", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.MediaType", b =>
                {
                    b.Navigation("Mediafiles");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Mediafile", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("MediaClubs");

                    b.Navigation("MediaComment")
                        .IsRequired();

                    b.Navigation("MediaEvents");

                    b.Navigation("MediaNote")
                        .IsRequired();

                    b.Navigation("UserAvatars");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Note", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InverseIdRepostNavigation");

                    b.Navigation("MediaNotes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.NoteStatus", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.Wall", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Entities.WallType", b =>
                {
                    b.Navigation("Walls");
                });
#pragma warning restore 612, 618
        }
    }
}
