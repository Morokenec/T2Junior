// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T2JuniorAPI.Data;

#nullable disable

namespace T2JuniorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250127062423_UpdateModelEvents")]
    partial class UpdateModelEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccumulatedPoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Post")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Club", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Raiting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reports")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.ClubRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClubRoles");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.ClubUser", b =>
                {
                    b.Property<string>("IdClub")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdRole")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdClub", "IdUser", "IdRole");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("ClubUsers");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDatetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdNoteNavigationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdUserNavigationId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LikeCount")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParrentCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdNoteNavigationId");

                    b.HasIndex("IdUserNavigationId");

                    b.HasIndex("ParrentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FactParticpants")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdClub")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdClubNavigationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdDirectionNavigationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberParticpants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Raiting")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdClubNavigationId");

                    b.HasIndex("IdDirectionNavigationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.EventDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventDirections");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDatetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdRepost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdStatusNavigationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdWall")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdWallNavigationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdRepost");

                    b.HasIndex("IdStatusNavigationId");

                    b.HasIndex("IdWallNavigationId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.NoteStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NoteStatuses");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.UserSubscribers", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSubscriber")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUser", "IdSubscriber");

                    b.HasIndex("IdSubscriber");

                    b.ToTable("UserSubscribers");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Wall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTypeNavigationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.HasIndex("IdTypeNavigationId");

                    b.ToTable("Walls");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.WallType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WallTypes");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.HasOne("Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("News", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.ClubUser", b =>
                {
                    b.HasOne("T2JuniorAPI.Models.Club", "IdClubNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Models.ClubRole", "IdRoleNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "IdUserNavigation")
                        .WithMany("ClubUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdClubNavigation");

                    b.Navigation("IdRoleNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Comment", b =>
                {
                    b.HasOne("T2JuniorAPI.Models.Note", "IdNoteNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdNoteNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUserNavigationId");

                    b.HasOne("T2JuniorAPI.Models.Comment", "ParrentComment")
                        .WithMany("InverseParrentComment")
                        .HasForeignKey("ParrentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IdNoteNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("ParrentComment");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Event", b =>
                {
                    b.HasOne("T2JuniorAPI.Models.Club", "IdClubNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdClubNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Models.EventDirection", "IdDirectionNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdDirectionNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdClubNavigation");

                    b.Navigation("IdDirectionNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Note", b =>
                {
                    b.HasOne("T2JuniorAPI.Models.Note", "IdRepostNavigation")
                        .WithMany("InverseIdRepostNavigation")
                        .HasForeignKey("IdRepost")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("T2JuniorAPI.Models.NoteStatus", "IdStatusNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdStatusNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Models.Wall", "IdWallNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdWallNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRepostNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdWallNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.UserSubscribers", b =>
                {
                    b.HasOne("ApplicationUser", "Subscriber")
                        .WithMany()
                        .HasForeignKey("IdSubscriber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Subscribers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscriber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Wall", b =>
                {
                    b.HasOne("ApplicationUser", "Owner")
                        .WithMany("Walls")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Models.Club", "IdOwnerNavigation")
                        .WithMany("Walls")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T2JuniorAPI.Models.WallType", "IdTypeNavigation")
                        .WithMany("Walls")
                        .HasForeignKey("IdTypeNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdOwnerNavigation");

                    b.Navigation("IdTypeNavigation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Comments");

                    b.Navigation("Subscribers");

                    b.Navigation("Walls");
                });

            modelBuilder.Entity("Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Club", b =>
                {
                    b.Navigation("ClubUsers");

                    b.Navigation("Events");

                    b.Navigation("Walls");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.ClubRole", b =>
                {
                    b.Navigation("ClubUsers");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Comment", b =>
                {
                    b.Navigation("InverseParrentComment");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.EventDirection", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Note", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InverseIdRepostNavigation");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.NoteStatus", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.Wall", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("T2JuniorAPI.Models.WallType", b =>
                {
                    b.Navigation("Walls");
                });
#pragma warning restore 612, 618
        }
    }
}
